// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v28github "github.com/google/go-github/v28/github"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AssignPullRequest provides a mock function with given fields: ctx, owner, repo, prNumber, assignees
func (_m *Client) AssignPullRequest(ctx context.Context, owner string, repo string, prNumber int, assignees []string) error {
	ret := _m.Called(ctx, owner, repo, prNumber, assignees)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, []string) error); ok {
		r0 = rf(ctx, owner, repo, prNumber, assignees)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateComment provides a mock function with given fields: ctx, org, repo, number, comment
func (_m *Client) CreateComment(ctx context.Context, org string, repo string, number int, comment *v28github.IssueComment) error {
	ret := _m.Called(ctx, org, repo, number, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *v28github.IssueComment) error); ok {
		r0 = rf(ctx, org, repo, number, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePullRequest provides a mock function with given fields: ctx, org, repo, pr
func (_m *Client) CreatePullRequest(ctx context.Context, org string, repo string, pr *v28github.NewPullRequest) (*v28github.PullRequest, error) {
	ret := _m.Called(ctx, org, repo, pr)

	var r0 *v28github.PullRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v28github.NewPullRequest) *v28github.PullRequest); ok {
		r0 = rf(ctx, org, repo, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v28github.PullRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *v28github.NewPullRequest) error); ok {
		r1 = rf(ctx, org, repo, pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, org, repo, commentID
func (_m *Client) DeleteComment(ctx context.Context, org string, repo string, commentID int64) error {
	ret := _m.Called(ctx, org, repo, commentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, org, repo, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPullRequest provides a mock function with given fields: ctx, org, repo, pr
func (_m *Client) GetPullRequest(ctx context.Context, org string, repo string, pr int) (*v28github.PullRequest, error) {
	ret := _m.Called(ctx, org, repo, pr)

	var r0 *v28github.PullRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *v28github.PullRequest); ok {
		r0 = rf(ctx, org, repo, pr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v28github.PullRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, org, repo, pr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOrganizationMember provides a mock function with given fields: ctx, org, user
func (_m *Client) IsOrganizationMember(ctx context.Context, org string, user string) bool {
	ret := _m.Called(ctx, org, user)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, org, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListComments provides a mock function with given fields: ctx, owner, repo, number, opts
func (_m *Client) ListComments(ctx context.Context, owner string, repo string, number int, opts *v28github.IssueListCommentsOptions) ([]*v28github.IssueComment, error) {
	ret := _m.Called(ctx, owner, repo, number, opts)

	var r0 []*v28github.IssueComment
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int, *v28github.IssueListCommentsOptions) []*v28github.IssueComment); ok {
		r0 = rf(ctx, owner, repo, number, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v28github.IssueComment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int, *v28github.IssueListCommentsOptions) error); ok {
		r1 = rf(ctx, owner, repo, number, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
