// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	go_gitlab "github.com/xanzy/go-gitlab"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CancelPipelineBuild provides a mock function with given fields: path, id
func (_m *Client) CancelPipelineBuild(path string, id int) error {
	ret := _m.Called(path, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(path, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePipeline provides a mock function with given fields: path, options
func (_m *Client) CreatePipeline(path string, options *go_gitlab.CreatePipelineOptions) (*go_gitlab.Pipeline, error) {
	ret := _m.Called(path, options)

	var r0 *go_gitlab.Pipeline
	if rf, ok := ret.Get(0).(func(string, *go_gitlab.CreatePipelineOptions) *go_gitlab.Pipeline); ok {
		r0 = rf(path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_gitlab.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *go_gitlab.CreatePipelineOptions) error); ok {
		r1 = rf(path, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineVariables provides a mock function with given fields: path, id
func (_m *Client) GetPipelineVariables(path string, id int) ([]*go_gitlab.PipelineVariable, error) {
	ret := _m.Called(path, id)

	var r0 []*go_gitlab.PipelineVariable
	if rf, ok := ret.Get(0).(func(string, int) []*go_gitlab.PipelineVariable); ok {
		r0 = rf(path, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*go_gitlab.PipelineVariable)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(path, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectPipelines provides a mock function with given fields: path, options
func (_m *Client) ListProjectPipelines(path string, options *go_gitlab.ListProjectPipelinesOptions) (go_gitlab.PipelineList, error) {
	ret := _m.Called(path, options)

	var r0 go_gitlab.PipelineList
	if rf, ok := ret.Get(0).(func(string, *go_gitlab.ListProjectPipelinesOptions) go_gitlab.PipelineList); ok {
		r0 = rf(path, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(go_gitlab.PipelineList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *go_gitlab.ListProjectPipelinesOptions) error); ok {
		r1 = rf(path, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
